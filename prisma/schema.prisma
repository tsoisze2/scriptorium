generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  password        String
  firstName       String
  lastName        String
  email           String           @unique
  phoneNum        String?
  avatarUrl       String?
  role            String           @default("USER")
  createdAt       DateTime         @default(now())

  // Relations
  codeTemplates   CodeTemplate[]
  comments        Comment[]
  replies         Reply[]
  ratings         Rating[]
  reports         Report[]
}

model CodeTemplate {
  id             Int               @id @default(autoincrement())
  title          String
  code           String
  explanation    String
  language       String
  createdAt      DateTime          @default(now())
  lastModified   DateTime          @default(now())

  // Foreign key relation to User
  authorId       Int
  author         User              @relation(fields: [authorId], references: [id])

  // Relations
  blogPosts      BlogPost[]
  tags           Tag[]             @relation("CodeTemplateTags")
}

model BlogPost {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  content         String
  visibleToPublic Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lastModified    DateTime         @default(now())

  // Foreign key relation to CodeTemplate
  codeTemplateId  Int
  codeTemplate    CodeTemplate     @relation(fields: [codeTemplateId], references: [id])

  // Relations
  tags            Tag[]            @relation("BlogPostTags")
  comments        Comment[]
  ratings         Rating[]
  reports         Report[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  content         String
  visibleToPublic Boolean           @default(true)
  createdAt       DateTime          @default(now())

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Foreign key relation to BlogPost
  blogPostId      Int
  blogPost        BlogPost          @relation(fields: [blogPostId], references: [id])

  // Relations
  replies         Reply[]
  ratings         Rating[]
  reports         Report[]
}

model Reply {
  id              Int               @id @default(autoincrement())
  content         String
  visibleToPublic Boolean           @default(true)
  createdAt       DateTime          @default(now())

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Foreign key relation to Comment
  commentId       Int
  comment         Comment           @relation(fields: [commentId], references: [id])

  // Self-referencing relation for nested replies
  replyingToId    Int?
  replyingTo      Reply?            @relation("ReplyingToReply", fields: [replyingToId], references: [id])
  replies         Reply[]           @relation("ReplyingToReply")

  // Relations
  reports         Report[]
}


model Rating {
  id              Int               @id @default(autoincrement())
  upvote          Boolean

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Optional foreign key relations (Rating can be for either a BlogPost or a Comment)
  blogPostId      Int?
  blogPost        BlogPost?         @relation(fields: [blogPostId], references: [id])

  commentId       Int?
  comment         Comment?          @relation(fields: [commentId], references: [id])
}

model Report {
  id              Int               @id @default(autoincrement())
  reportContent   String

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Optional foreign key relations (Report can be for a BlogPost, Comment, or Reply)
  blogPostId      Int?
  blogPost        BlogPost?         @relation(fields: [blogPostId], references: [id])

  commentId       Int?
  comment         Comment?          @relation(fields: [commentId], references: [id])

  replyId         Int?
  reply           Reply?            @relation(fields: [replyId], references: [id])
}

model Tag {
  id              Int               @id @default(autoincrement())
  name            String            @unique

  // Relations
  blogPosts       BlogPost[]        @relation("BlogPostTags")
  codeTemplates   CodeTemplate[]    @relation("CodeTemplateTags")
}
