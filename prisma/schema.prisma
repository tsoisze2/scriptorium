generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  password        String
  firstName       String
  lastName        String
  email           String           @unique
  phoneNum        String?
  avatarUrl       String?
  role            String           @default("USER")
  createdAt       DateTime         @default(now())
  refreshToken    String?

  // Relations
  codeTemplates   CodeTemplate[]
  comments        Comment[]
  replies         Reply[]
  ratingBlogPosts RatingBlogPost[]
  ratingComments  RatingComment[]
  reportBlogPosts ReportBlogPost[]
  reportComments  ReportComment[]
  reportReplies   ReportReply[]
}

model CodeTemplate {
  id             Int               @id @default(autoincrement())
  title          String
  code           String
  explanation    String
  language       String
  createdAt      DateTime          @default(now())
  lastModified   DateTime          @default(now())

  // Foreign key relation to User
  authorId       Int
  author         User              @relation(fields: [authorId], references: [id])

  // Relations
  blogPosts      BlogPost[]
  tags           Tag[]             @relation("CodeTemplateTags")
}

model BlogPost {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  content         String
  visibleToPublic Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lastModified    DateTime         @default(now())

  // Foreign key relation to CodeTemplate
  codeTemplateId  Int
  codeTemplate    CodeTemplate     @relation(fields: [codeTemplateId], references: [id])

  // Relations
  tags            Tag[]            @relation("BlogPostTags")
  comments        Comment[]
  ratings         RatingBlogPost[]
  reports         ReportBlogPost[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  content         String
  visibleToPublic Boolean           @default(true)
  createdAt       DateTime          @default(now())

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Foreign key relation to BlogPost
  blogPostId      Int
  blogPost        BlogPost          @relation(fields: [blogPostId], references: [id])

  // Relations
  replies         Reply[]
  ratings         RatingComment[]
  reports         ReportComment[]
}

model Reply {
  id              Int               @id @default(autoincrement())
  content         String
  visibleToPublic Boolean           @default(true)
  createdAt       DateTime          @default(now())

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Foreign key relation to Comment
  commentId       Int
  comment         Comment           @relation(fields: [commentId], references: [id])

  // Self-referencing relation for nested replies
  replyingToId    Int?
  replyingTo      Reply?            @relation("ReplyingToReply", fields: [replyingToId], references: [id])
  replies         Reply[]           @relation("ReplyingToReply")

  // Relations
  reports         ReportReply[]
}

model RatingBlogPost {
  id              Int               @id @default(autoincrement())
  upvote          Boolean

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Foreign key relations
  blogPostId      Int 
  blogPost        BlogPost          @relation(fields: [blogPostId], references: [id])
}

model RatingComment {
  id              Int               @id @default(autoincrement())
  upvote          Boolean

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  // Foreign key relations
  commentId       Int 
  comment         Comment           @relation(fields: [commentId], references: [id])
}

model ReportBlogPost {
  id              Int               @id @default(autoincrement())
  content         String
  resolved        Boolean           @default(false)

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  blogPostId      Int
  blogPost        BlogPost          @relation(fields: [blogPostId], references: [id])
}

model ReportComment {
  id              Int               @id @default(autoincrement())
  content         String
  resolved        Boolean           @default(false)

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  commentId       Int 
  comment         Comment           @relation(fields: [commentId], references: [id])
}

model ReportReply {
  id              Int               @id @default(autoincrement())
  content         String
  resolved        Boolean           @default(false)

  // Foreign key relation to User
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])

  replyId         Int
  reply           Reply             @relation(fields: [replyId], references: [id])
}

model Tag {
  id              Int               @id @default(autoincrement())
  name            String            @unique

  // Relations
  blogPosts       BlogPost[]        @relation("BlogPostTags")
  codeTemplates   CodeTemplate[]    @relation("CodeTemplateTags")
}

model InviteCode {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  isValid     Boolean  @default(true) // Mark invite codes as invalid after use if needed
  createdAt   DateTime @default(now())
}